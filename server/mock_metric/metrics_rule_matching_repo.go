// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/server/metric (interfaces: MetricsRuleMatchingRepo)

// Package mock_metric is a generated GoMock package.
package mock_metric

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	metric "github.com/hotstone-seo/hotstone-seo/server/metric"
	repository "github.com/hotstone-seo/hotstone-seo/server/repository"
	url "net/url"
	reflect "reflect"
)

// MockMetricsRuleMatchingRepo is a mock of MetricsRuleMatchingRepo interface
type MockMetricsRuleMatchingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRuleMatchingRepoMockRecorder
}

// MockMetricsRuleMatchingRepoMockRecorder is the mock recorder for MockMetricsRuleMatchingRepo
type MockMetricsRuleMatchingRepoMockRecorder struct {
	mock *MockMetricsRuleMatchingRepo
}

// NewMockMetricsRuleMatchingRepo creates a new mock instance
func NewMockMetricsRuleMatchingRepo(ctrl *gomock.Controller) *MockMetricsRuleMatchingRepo {
	mock := &MockMetricsRuleMatchingRepo{ctrl: ctrl}
	mock.recorder = &MockMetricsRuleMatchingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsRuleMatchingRepo) EXPECT() *MockMetricsRuleMatchingRepoMockRecorder {
	return m.recorder
}

// CountMatched mocks base method
func (m *MockMetricsRuleMatchingRepo) CountMatched(arg0 context.Context, arg1 url.Values) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMatched", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMatched indicates an expected call of CountMatched
func (mr *MockMetricsRuleMatchingRepoMockRecorder) CountMatched(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMatched", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).CountMatched), arg0, arg1)
}

// CountUniquePage mocks base method
func (m *MockMetricsRuleMatchingRepo) CountUniquePage(arg0 context.Context, arg1 url.Values) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUniquePage", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUniquePage indicates an expected call of CountUniquePage
func (mr *MockMetricsRuleMatchingRepoMockRecorder) CountUniquePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUniquePage", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).CountUniquePage), arg0, arg1)
}

// Insert mocks base method
func (m *MockMetricsRuleMatchingRepo) Insert(arg0 context.Context, arg1 metric.MetricsRuleMatching) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockMetricsRuleMatchingRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).Insert), arg0, arg1)
}

// ListCountHitPerDay mocks base method
func (m *MockMetricsRuleMatchingRepo) ListCountHitPerDay(arg0 context.Context, arg1, arg2, arg3 string) ([]*metric.MetricsCountHitPerDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCountHitPerDay", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*metric.MetricsCountHitPerDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCountHitPerDay indicates an expected call of ListCountHitPerDay
func (mr *MockMetricsRuleMatchingRepoMockRecorder) ListCountHitPerDay(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCountHitPerDay", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).ListCountHitPerDay), arg0, arg1, arg2, arg3)
}

// ListMismatchedCount mocks base method
func (m *MockMetricsRuleMatchingRepo) ListMismatchedCount(arg0 context.Context, arg1 repository.PaginationParam) ([]*metric.MetricsMismatchedCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMismatchedCount", arg0, arg1)
	ret0, _ := ret[0].([]*metric.MetricsMismatchedCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMismatchedCount indicates an expected call of ListMismatchedCount
func (mr *MockMetricsRuleMatchingRepoMockRecorder) ListMismatchedCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMismatchedCount", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).ListMismatchedCount), arg0, arg1)
}
