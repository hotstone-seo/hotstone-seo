// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/server/service (interfaces: ProviderService)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	cachekit "github.com/hotstone-seo/hotstone-seo/pkg/cachekit"
	repository "github.com/hotstone-seo/hotstone-seo/server/repository"
	service "github.com/hotstone-seo/hotstone-seo/server/service"
	reflect "reflect"
)

// MockProviderService is a mock of ProviderService interface
type MockProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockProviderServiceMockRecorder
}

// MockProviderServiceMockRecorder is the mock recorder for MockProviderService
type MockProviderServiceMockRecorder struct {
	mock *MockProviderService
}

// NewMockProviderService creates a new mock instance
func NewMockProviderService(ctrl *gomock.Controller) *MockProviderService {
	mock := &MockProviderService{ctrl: ctrl}
	mock.recorder = &MockProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderService) EXPECT() *MockProviderServiceMockRecorder {
	return m.recorder
}

// DumpRuleTree mocks base method
func (m *MockProviderService) DumpRuleTree(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpRuleTree", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpRuleTree indicates an expected call of DumpRuleTree
func (mr *MockProviderServiceMockRecorder) DumpRuleTree(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpRuleTree", reflect.TypeOf((*MockProviderService)(nil).DumpRuleTree), arg0)
}

// FetchTags mocks base method
func (m *MockProviderService) FetchTags(arg0 context.Context, arg1 int64, arg2 string) ([]*repository.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTags", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*repository.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTags indicates an expected call of FetchTags
func (mr *MockProviderServiceMockRecorder) FetchTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTags", reflect.TypeOf((*MockProviderService)(nil).FetchTags), arg0, arg1, arg2)
}

// MatchRule mocks base method
func (m *MockProviderService) MatchRule(arg0 context.Context, arg1 service.MatchRuleRequest) (*service.MatchRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRule", arg0, arg1)
	ret0, _ := ret[0].(*service.MatchRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRule indicates an expected call of MatchRule
func (mr *MockProviderServiceMockRecorder) MatchRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRule", reflect.TypeOf((*MockProviderService)(nil).MatchRule), arg0, arg1)
}

// RetrieveData mocks base method
func (m *MockProviderService) RetrieveData(arg0 context.Context, arg1 service.RetrieveDataRequest, arg2 *cachekit.Pragma) (*service.RetrieveDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveData", arg0, arg1, arg2)
	ret0, _ := ret[0].(*service.RetrieveDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveData indicates an expected call of RetrieveData
func (mr *MockProviderServiceMockRecorder) RetrieveData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveData", reflect.TypeOf((*MockProviderService)(nil).RetrieveData), arg0, arg1, arg2)
}

// Tags mocks base method
func (m *MockProviderService) Tags(arg0 context.Context, arg1 service.ProvideTagsRequest, arg2 *cachekit.Pragma) ([]*service.InterpolatedTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*service.InterpolatedTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags
func (mr *MockProviderServiceMockRecorder) Tags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockProviderService)(nil).Tags), arg0, arg1, arg2)
}
