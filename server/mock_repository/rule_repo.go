// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/server/repository (interfaces: RuleRepo)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/server/repository"
	reflect "reflect"
)

// MockRuleRepo is a mock of RuleRepo interface
type MockRuleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRuleRepoMockRecorder
}

// MockRuleRepoMockRecorder is the mock recorder for MockRuleRepo
type MockRuleRepoMockRecorder struct {
	mock *MockRuleRepo
}

// NewMockRuleRepo creates a new mock instance
func NewMockRuleRepo(ctrl *gomock.Controller) *MockRuleRepo {
	mock := &MockRuleRepo{ctrl: ctrl}
	mock.recorder = &MockRuleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleRepo) EXPECT() *MockRuleRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockRuleRepo) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRuleRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRuleRepo)(nil).Delete), arg0, arg1)
}

// Find mocks base method
func (m *MockRuleRepo) Find(arg0 context.Context, arg1 repository.PaginationParam) ([]*repository.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]*repository.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRuleRepoMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRuleRepo)(nil).Find), arg0, arg1)
}

// FindOne mocks base method
func (m *MockRuleRepo) FindOne(arg0 context.Context, arg1 int64) (*repository.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*repository.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockRuleRepoMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRuleRepo)(nil).FindOne), arg0, arg1)
}

// Insert mocks base method
func (m *MockRuleRepo) Insert(arg0 context.Context, arg1 repository.Rule) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockRuleRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRuleRepo)(nil).Insert), arg0, arg1)
}

// Update mocks base method
func (m *MockRuleRepo) Update(arg0 context.Context, arg1 repository.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRuleRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRuleRepo)(nil).Update), arg0, arg1)
}
