// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/server/urlstore (interfaces: URLService)

// Package mock_urlstore is a generated GoMock package.
package mock_urlstore

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockURLService is a mock of URLService interface
type MockURLService struct {
	ctrl     *gomock.Controller
	recorder *MockURLServiceMockRecorder
}

// MockURLServiceMockRecorder is the mock recorder for MockURLService
type MockURLServiceMockRecorder struct {
	mock *MockURLService
}

// NewMockURLService creates a new mock instance
func NewMockURLService(ctrl *gomock.Controller) *MockURLService {
	mock := &MockURLService{ctrl: ctrl}
	mock.recorder = &MockURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLService) EXPECT() *MockURLServiceMockRecorder {
	return m.recorder
}

// DumpTree mocks base method
func (m *MockURLService) DumpTree() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpTree")
	ret0, _ := ret[0].(string)
	return ret0
}

// DumpTree indicates an expected call of DumpTree
func (mr *MockURLServiceMockRecorder) DumpTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpTree", reflect.TypeOf((*MockURLService)(nil).DumpTree))
}

// FullSync mocks base method
func (m *MockURLService) FullSync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullSync")
	ret0, _ := ret[0].(error)
	return ret0
}

// FullSync indicates an expected call of FullSync
func (mr *MockURLServiceMockRecorder) FullSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullSync", reflect.TypeOf((*MockURLService)(nil).FullSync))
}

// Match mocks base method
func (m *MockURLService) Match(arg0 string) (int, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]string)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockURLServiceMockRecorder) Match(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockURLService)(nil).Match), arg0)
}

// Sync mocks base method
func (m *MockURLService) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockURLServiceMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockURLService)(nil).Sync))
}
