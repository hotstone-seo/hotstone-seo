// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/api/repository (interfaces: AuditTrailRepo)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/internal/api/repository"
	reflect "reflect"
)

// MockAuditTrailRepo is a mock of AuditTrailRepo interface
type MockAuditTrailRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuditTrailRepoMockRecorder
}

// MockAuditTrailRepoMockRecorder is the mock recorder for MockAuditTrailRepo
type MockAuditTrailRepoMockRecorder struct {
	mock *MockAuditTrailRepo
}

// NewMockAuditTrailRepo creates a new mock instance
func NewMockAuditTrailRepo(ctrl *gomock.Controller) *MockAuditTrailRepo {
	mock := &MockAuditTrailRepo{ctrl: ctrl}
	mock.recorder = &MockAuditTrailRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuditTrailRepo) EXPECT() *MockAuditTrailRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockAuditTrailRepo) Find(arg0 context.Context, arg1 repository.PaginationParam) ([]*repository.AuditTrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]*repository.AuditTrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAuditTrailRepoMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAuditTrailRepo)(nil).Find), arg0, arg1)
}

// Insert mocks base method
func (m *MockAuditTrailRepo) Insert(arg0 context.Context, arg1 repository.AuditTrail) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockAuditTrailRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAuditTrailRepo)(nil).Insert), arg0, arg1)
}
