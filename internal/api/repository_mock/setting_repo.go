// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/api/repository (interfaces: SettingRepo)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/internal/api/repository"
	dbkit "github.com/typical-go/typical-rest-server/pkg/dbkit"
	reflect "reflect"
)

// MockSettingRepo is a mock of SettingRepo interface
type MockSettingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSettingRepoMockRecorder
}

// MockSettingRepoMockRecorder is the mock recorder for MockSettingRepo
type MockSettingRepoMockRecorder struct {
	mock *MockSettingRepo
}

// NewMockSettingRepo creates a new mock instance
func NewMockSettingRepo(ctrl *gomock.Controller) *MockSettingRepo {
	mock := &MockSettingRepo{ctrl: ctrl}
	mock.recorder = &MockSettingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettingRepo) EXPECT() *MockSettingRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockSettingRepo) Find(arg0 context.Context, arg1 ...dbkit.SelectOption) ([]*repository.Setting, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]*repository.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockSettingRepoMockRecorder) Find(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSettingRepo)(nil).Find), varargs...)
}

// Update mocks base method
func (m *MockSettingRepo) Update(arg0 context.Context, arg1 *repository.Setting, arg2 dbkit.UpdateOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSettingRepoMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSettingRepo)(nil).Update), arg0, arg1, arg2)
}
