// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/api/service (interfaces: SettingSvc)

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/internal/api/repository"
	reflect "reflect"
)

// MockSettingSvc is a mock of SettingSvc interface
type MockSettingSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSettingSvcMockRecorder
}

// MockSettingSvcMockRecorder is the mock recorder for MockSettingSvc
type MockSettingSvcMockRecorder struct {
	mock *MockSettingSvc
}

// NewMockSettingSvc creates a new mock instance
func NewMockSettingSvc(ctrl *gomock.Controller) *MockSettingSvc {
	mock := &MockSettingSvc{ctrl: ctrl}
	mock.recorder = &MockSettingSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettingSvc) EXPECT() *MockSettingSvcMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockSettingSvc) Find(arg0 context.Context) ([]*repository.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]*repository.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockSettingSvcMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSettingSvc)(nil).Find), arg0)
}

// FindOne mocks base method
func (m *MockSettingSvc) FindOne(arg0 context.Context, arg1 string) (*repository.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*repository.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockSettingSvcMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockSettingSvc)(nil).FindOne), arg0, arg1)
}

// Update mocks base method
func (m *MockSettingSvc) Update(arg0 context.Context, arg1 string, arg2 *repository.Setting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSettingSvcMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSettingSvc)(nil).Update), arg0, arg1, arg2)
}
