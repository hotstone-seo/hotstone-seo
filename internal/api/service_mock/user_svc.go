// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/api/service (interfaces: UserSvc)

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/internal/api/repository"
	reflect "reflect"
)

// MockUserSvc is a mock of UserSvc interface
type MockUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcMockRecorder
}

// MockUserSvcMockRecorder is the mock recorder for MockUserSvc
type MockUserSvcMockRecorder struct {
	mock *MockUserSvc
}

// NewMockUserSvc creates a new mock instance
func NewMockUserSvc(ctrl *gomock.Controller) *MockUserSvc {
	mock := &MockUserSvc{ctrl: ctrl}
	mock.recorder = &MockUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserSvc) EXPECT() *MockUserSvcMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockUserSvc) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserSvcMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSvc)(nil).Delete), arg0, arg1)
}

// Find mocks base method
func (m *MockUserSvc) Find(arg0 context.Context) ([]*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserSvcMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserSvc)(nil).Find), arg0)
}

// FindOne mocks base method
func (m *MockUserSvc) FindOne(arg0 context.Context, arg1 int64) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockUserSvcMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserSvc)(nil).FindOne), arg0, arg1)
}

// Insert mocks base method
func (m *MockUserSvc) Insert(arg0 context.Context, arg1 repository.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockUserSvcMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserSvc)(nil).Insert), arg0, arg1)
}

// Update mocks base method
func (m *MockUserSvc) Update(arg0 context.Context, arg1 repository.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserSvcMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSvc)(nil).Update), arg0, arg1)
}
