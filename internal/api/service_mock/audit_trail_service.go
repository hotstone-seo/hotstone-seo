// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/api/service (interfaces: AuditTrailService)

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/internal/api/repository"
	service "github.com/hotstone-seo/hotstone-seo/internal/api/service"
	reflect "reflect"
)

// MockAuditTrailService is a mock of AuditTrailService interface
type MockAuditTrailService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditTrailServiceMockRecorder
}

// MockAuditTrailServiceMockRecorder is the mock recorder for MockAuditTrailService
type MockAuditTrailServiceMockRecorder struct {
	mock *MockAuditTrailService
}

// NewMockAuditTrailService creates a new mock instance
func NewMockAuditTrailService(ctrl *gomock.Controller) *MockAuditTrailService {
	mock := &MockAuditTrailService{ctrl: ctrl}
	mock.recorder = &MockAuditTrailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuditTrailService) EXPECT() *MockAuditTrailServiceMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockAuditTrailService) Find(arg0 context.Context, arg1 repository.PaginationParam) ([]*repository.AuditTrail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]*repository.AuditTrail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAuditTrailServiceMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAuditTrailService)(nil).Find), arg0, arg1)
}

// RecordChanges mocks base method
func (m *MockAuditTrailService) RecordChanges(arg0 context.Context, arg1 service.Record) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordChanges", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordChanges indicates an expected call of RecordChanges
func (mr *MockAuditTrailServiceMockRecorder) RecordChanges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordChanges", reflect.TypeOf((*MockAuditTrailService)(nil).RecordChanges), arg0, arg1)
}

// RecordDelete mocks base method
func (m *MockAuditTrailService) RecordDelete(arg0 context.Context, arg1 string, arg2 int64, arg3 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDelete", arg0, arg1, arg2, arg3)
}

// RecordDelete indicates an expected call of RecordDelete
func (mr *MockAuditTrailServiceMockRecorder) RecordDelete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDelete", reflect.TypeOf((*MockAuditTrailService)(nil).RecordDelete), arg0, arg1, arg2, arg3)
}

// RecordInsert mocks base method
func (m *MockAuditTrailService) RecordInsert(arg0 context.Context, arg1 string, arg2 int64, arg3 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordInsert", arg0, arg1, arg2, arg3)
}

// RecordInsert indicates an expected call of RecordInsert
func (mr *MockAuditTrailServiceMockRecorder) RecordInsert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordInsert", reflect.TypeOf((*MockAuditTrailService)(nil).RecordInsert), arg0, arg1, arg2, arg3)
}

// RecordUpdate mocks base method
func (m *MockAuditTrailService) RecordUpdate(arg0 context.Context, arg1 string, arg2 int64, arg3, arg4 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUpdate", arg0, arg1, arg2, arg3, arg4)
}

// RecordUpdate indicates an expected call of RecordUpdate
func (mr *MockAuditTrailServiceMockRecorder) RecordUpdate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdate", reflect.TypeOf((*MockAuditTrailService)(nil).RecordUpdate), arg0, arg1, arg2, arg3, arg4)
}
