// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/api/service (interfaces: UserRoleSvc)

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/internal/api/repository"
	service "github.com/hotstone-seo/hotstone-seo/internal/api/service"
	reflect "reflect"
)

// MockUserRoleSvc is a mock of UserRoleSvc interface
type MockUserRoleSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleSvcMockRecorder
}

// MockUserRoleSvcMockRecorder is the mock recorder for MockUserRoleSvc
type MockUserRoleSvcMockRecorder struct {
	mock *MockUserRoleSvc
}

// NewMockUserRoleSvc creates a new mock instance
func NewMockUserRoleSvc(ctrl *gomock.Controller) *MockUserRoleSvc {
	mock := &MockUserRoleSvc{ctrl: ctrl}
	mock.recorder = &MockUserRoleSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRoleSvc) EXPECT() *MockUserRoleSvcMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockUserRoleSvc) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserRoleSvcMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRoleSvc)(nil).Delete), arg0, arg1)
}

// Find mocks base method
func (m *MockUserRoleSvc) Find(arg0 context.Context) ([]*repository.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]*repository.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserRoleSvcMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRoleSvc)(nil).Find), arg0)
}

// FindOne mocks base method
func (m *MockUserRoleSvc) FindOne(arg0 context.Context, arg1 int64) (*repository.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*repository.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockUserRoleSvcMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserRoleSvc)(nil).FindOne), arg0, arg1)
}

// FindOneByName mocks base method
func (m *MockUserRoleSvc) FindOneByName(arg0 context.Context, arg1 string) (*repository.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", arg0, arg1)
	ret0, _ := ret[0].(*repository.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName
func (mr *MockUserRoleSvcMockRecorder) FindOneByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockUserRoleSvc)(nil).FindOneByName), arg0, arg1)
}

// Insert mocks base method
func (m *MockUserRoleSvc) Insert(arg0 context.Context, arg1 service.UserRoleRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockUserRoleSvcMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRoleSvc)(nil).Insert), arg0, arg1)
}

// Update mocks base method
func (m *MockUserRoleSvc) Update(arg0 context.Context, arg1 service.UserRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserRoleSvcMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRoleSvc)(nil).Update), arg0, arg1)
}
