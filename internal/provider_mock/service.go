// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hotstone-seo/hotstone-seo/internal/provider (interfaces: Service)

// Package provider_mock is a generated GoMock package.
package provider_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	provider "github.com/hotstone-seo/hotstone-seo/internal/provider"
	cachekit "github.com/hotstone-seo/hotstone-seo/pkg/cachekit"
	url "net/url"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchTags mocks base method
func (m *MockService) FetchTags(arg0 context.Context, arg1 url.Values) ([]*provider.ITag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTags", arg0, arg1)
	ret0, _ := ret[0].([]*provider.ITag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTags indicates an expected call of FetchTags
func (mr *MockServiceMockRecorder) FetchTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTags", reflect.TypeOf((*MockService)(nil).FetchTags), arg0, arg1)
}

// FetchTagsWithCache mocks base method
func (m *MockService) FetchTagsWithCache(arg0 context.Context, arg1 url.Values, arg2 *cachekit.Pragma) ([]*provider.ITag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTagsWithCache", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*provider.ITag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTagsWithCache indicates an expected call of FetchTagsWithCache
func (mr *MockServiceMockRecorder) FetchTagsWithCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTagsWithCache", reflect.TypeOf((*MockService)(nil).FetchTagsWithCache), arg0, arg1, arg2)
}

// Match mocks base method
func (m *MockService) Match(arg0 context.Context, arg1 url.Values) (*provider.MatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(*provider.MatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockServiceMockRecorder) Match(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockService)(nil).Match), arg0, arg1)
}
