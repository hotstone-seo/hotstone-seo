package typical

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"github.com/hotstone-seo/hotstone-seo/pkg/oauth2google"
	"github.com/hotstone-seo/hotstone-seo/server/config"
	"github.com/hotstone-seo/hotstone-seo/server/metric"
	"github.com/hotstone-seo/hotstone-seo/server/repository"
	"github.com/hotstone-seo/hotstone-seo/server/service"
	"github.com/hotstone-seo/hotstone-seo/server/urlstore"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typcfg"
	"github.com/typical-go/typical-rest-server/pkg/typpostgres"
	"github.com/typical-go/typical-rest-server/pkg/typredis"
)

func init() {
	typapp.AppendConstructor(
		typapp.NewConstructor(metric.NewReportRepo),
		typapp.NewConstructor(metric.NewRuleMatchingRepo),
		typapp.NewConstructor(repository.NewAuditTrailRepo),
		typapp.NewConstructor(repository.NewDataSourceRepo),
		typapp.NewConstructor(repository.NewHistoryRepo),
		typapp.NewConstructor(repository.NewRuleRepo),
		typapp.NewConstructor(repository.NewStructuredDataRepo),
		typapp.NewConstructor(repository.NewTagRepo),
		typapp.NewConstructor(repository.NewURLSyncRepo),
		typapp.NewConstructor(service.NewAuditTrailService),
		typapp.NewConstructor(service.NewCenterService),
		typapp.NewConstructor(service.NewDataSourceService),
		typapp.NewConstructor(service.NewHistoryService),
		typapp.NewConstructor(service.NewMetricService),
		typapp.NewConstructor(service.NewProviderService),
		typapp.NewConstructor(service.NewRuleService),
		typapp.NewConstructor(service.NewStructuredDataService),
		typapp.NewConstructor(service.NewTagService),
		typapp.NewConstructor(service.NewURLService),
		typapp.NewConstructor(urlstore.NewStore),
		typapp.NewConstructor(func() (cfg *config.Config, err error) {
			cfg = new(config.Config)
			if err = typcfg.Process("APP", cfg); err != nil {
				return nil, err
			}
			return
		}),
		typapp.NewConstructor(func() (cfg *typredis.Config, err error) {
			cfg = new(typredis.Config)
			if err = typcfg.Process("REDIS", cfg); err != nil {
				return nil, err
			}
			return
		}),
		typapp.NewConstructor(func() (cfg *typpostgres.Config, err error) {
			cfg = new(typpostgres.Config)
			if err = typcfg.Process("PG", cfg); err != nil {
				return nil, err
			}
			return
		}),
		typapp.NewConstructor(func() (cfg *oauth2google.Config, err error) {
			cfg = new(oauth2google.Config)
			if err = typcfg.Process("OAUTH2_GOOGLE", cfg); err != nil {
				return nil, err
			}
			return
		}),
	)
}
