package typical

// Autogenerated by Typical-Go. DO NOT EDIT.

import (
	"github.com/hotstone-seo/hotstone-seo/pkg/oauth2google"
	"github.com/hotstone-seo/hotstone-seo/server/config"
	"github.com/hotstone-seo/hotstone-seo/server/repository"
	"github.com/hotstone-seo/hotstone-seo/server/service"
	"github.com/typical-go/typical-go/pkg/typapp"
	"github.com/typical-go/typical-go/pkg/typcore"
	"github.com/typical-go/typical-rest-server/pkg/typpostgres"
	"github.com/typical-go/typical-rest-server/pkg/typredis"
)

func init() {
	typapp.AppendConstructor(
		typapp.NewConstructor(repository.NewAuditTrailRepo),
		typapp.NewConstructor(repository.NewDataSourceRepo),
		typapp.NewConstructor(repository.NewHistoryRepo),
		typapp.NewConstructor(repository.NewMetricsRuleMatchingRepo),
		typapp.NewConstructor(repository.NewRuleRepo),
		typapp.NewConstructor(repository.NewTagRepo),
		typapp.NewConstructor(repository.NewURLSyncRepo),
		typapp.NewConstructor(service.NewAuditTrailService),
		typapp.NewConstructor(service.NewCenterService),
		typapp.NewConstructor(service.NewDataSourceService),
		typapp.NewConstructor(service.NewHistoryService),
		typapp.NewConstructor(service.NewMetricsRuleMatchingService),
		typapp.NewConstructor(service.NewProviderService),
		typapp.NewConstructor(service.NewRuleService),
		typapp.NewConstructor(service.NewTagService),
		typapp.NewConstructor(service.NewURLService),
		typapp.NewConstructor(func(cfgMngr typcore.ConfigManager) (*config.Config, error) {
			cfg, err := cfgMngr.RetrieveConfig("APP")
			if err != nil {
				return nil, err
			}
			return cfg.(*config.Config), nil
		}),
		typapp.NewConstructor(func(cfgMngr typcore.ConfigManager) (*typredis.Config, error) {
			cfg, err := cfgMngr.RetrieveConfig("REDIS")
			if err != nil {
				return nil, err
			}
			return cfg.(*typredis.Config), nil
		}),
		typapp.NewConstructor(func(cfgMngr typcore.ConfigManager) (*typpostgres.Config, error) {
			cfg, err := cfgMngr.RetrieveConfig("PG")
			if err != nil {
				return nil, err
			}
			return cfg.(*typpostgres.Config), nil
		}),
		typapp.NewConstructor(func(cfgMngr typcore.ConfigManager) (*oauth2google.Config, error) {
			cfg, err := cfgMngr.RetrieveConfig("OAUTH2_GOOGLE")
			if err != nil {
				return nil, err
			}
			return cfg.(*oauth2google.Config), nil
		}),
	)
}
