// Code generated by MockGen. DO NOT EDIT.
// Source: app/task/urlstore_server.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	urlstore "github.com/hotstone-seo/hotstone-server/app/urlstore"
	reflect "reflect"
)

// MockURLStoreServer is a mock of URLStoreServer interface
type MockURLStoreServer struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoreServerMockRecorder
}

// MockURLStoreServerMockRecorder is the mock recorder for MockURLStoreServer
type MockURLStoreServerMockRecorder struct {
	mock *MockURLStoreServer
}

// NewMockURLStoreServer creates a new mock instance
func NewMockURLStoreServer(ctrl *gomock.Controller) *MockURLStoreServer {
	mock := &MockURLStoreServer{ctrl: ctrl}
	mock.recorder = &MockURLStoreServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLStoreServer) EXPECT() *MockURLStoreServerMockRecorder {
	return m.recorder
}

// FullSync mocks base method
func (m *MockURLStoreServer) FullSync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullSync")
	ret0, _ := ret[0].(error)
	return ret0
}

// FullSync indicates an expected call of FullSync
func (mr *MockURLStoreServerMockRecorder) FullSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullSync", reflect.TypeOf((*MockURLStoreServer)(nil).FullSync))
}

// Sync mocks base method
func (m *MockURLStoreServer) Sync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync")
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync
func (mr *MockURLStoreServerMockRecorder) Sync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockURLStoreServer)(nil).Sync))
}

// Match mocks base method
func (m *MockURLStoreServer) Match(url string) (int, urlstore.VarMap) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", url)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(urlstore.VarMap)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockURLStoreServerMockRecorder) Match(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockURLStoreServer)(nil).Match), url)
}
