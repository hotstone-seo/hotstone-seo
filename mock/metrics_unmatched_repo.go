// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/metrics_unmatched_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/app/repository"
	reflect "reflect"
)

// MockMetricsUnmatchedRepo is a mock of MetricsUnmatchedRepo interface
type MockMetricsUnmatchedRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsUnmatchedRepoMockRecorder
}

// MockMetricsUnmatchedRepoMockRecorder is the mock recorder for MockMetricsUnmatchedRepo
type MockMetricsUnmatchedRepoMockRecorder struct {
	mock *MockMetricsUnmatchedRepo
}

// NewMockMetricsUnmatchedRepo creates a new mock instance
func NewMockMetricsUnmatchedRepo(ctrl *gomock.Controller) *MockMetricsUnmatchedRepo {
	mock := &MockMetricsUnmatchedRepo{ctrl: ctrl}
	mock.recorder = &MockMetricsUnmatchedRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsUnmatchedRepo) EXPECT() *MockMetricsUnmatchedRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockMetricsUnmatchedRepo) Find(arg0 context.Context, arg1 int64) (*repository.MetricsUnmatched, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*repository.MetricsUnmatched)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockMetricsUnmatchedRepoMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMetricsUnmatchedRepo)(nil).Find), arg0, arg1)
}

// List mocks base method
func (m *MockMetricsUnmatchedRepo) List(arg0 context.Context) ([]*repository.MetricsUnmatched, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*repository.MetricsUnmatched)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMetricsUnmatchedRepoMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricsUnmatchedRepo)(nil).List), arg0)
}

// Insert mocks base method
func (m *MockMetricsUnmatchedRepo) Insert(arg0 context.Context, arg1 repository.MetricsUnmatched) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockMetricsUnmatchedRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMetricsUnmatchedRepo)(nil).Insert), arg0, arg1)
}

// Delete mocks base method
func (m *MockMetricsUnmatchedRepo) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMetricsUnmatchedRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMetricsUnmatchedRepo)(nil).Delete), arg0, arg1)
}

// Update mocks base method
func (m *MockMetricsUnmatchedRepo) Update(arg0 context.Context, arg1 repository.MetricsUnmatched) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMetricsUnmatchedRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricsUnmatchedRepo)(nil).Update), arg0, arg1)
}
