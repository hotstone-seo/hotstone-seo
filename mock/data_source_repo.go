// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/data_source_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-server/app/repository"
	reflect "reflect"
)

// MockDataSourceRepo is a mock of DataSourceRepo interface
type MockDataSourceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceRepoMockRecorder
}

// MockDataSourceRepoMockRecorder is the mock recorder for MockDataSourceRepo
type MockDataSourceRepoMockRecorder struct {
	mock *MockDataSourceRepo
}

// NewMockDataSourceRepo creates a new mock instance
func NewMockDataSourceRepo(ctrl *gomock.Controller) *MockDataSourceRepo {
	mock := &MockDataSourceRepo{ctrl: ctrl}
	mock.recorder = &MockDataSourceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSourceRepo) EXPECT() *MockDataSourceRepoMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockDataSourceRepo) FindOne(arg0 context.Context, arg1 int64) (*repository.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(*repository.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockDataSourceRepoMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDataSourceRepo)(nil).FindOne), arg0, arg1)
}

// Find mocks base method
func (m *MockDataSourceRepo) Find(arg0 context.Context) ([]*repository.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]*repository.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockDataSourceRepoMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDataSourceRepo)(nil).Find), arg0)
}

// Insert mocks base method
func (m *MockDataSourceRepo) Insert(arg0 context.Context, arg1 repository.DataSource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockDataSourceRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDataSourceRepo)(nil).Insert), arg0, arg1)
}

// Delete mocks base method
func (m *MockDataSourceRepo) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDataSourceRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataSourceRepo)(nil).Delete), arg0, arg1)
}

// Update mocks base method
func (m *MockDataSourceRepo) Update(arg0 context.Context, arg1 repository.DataSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDataSourceRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataSourceRepo)(nil).Update), arg0, arg1)
}
