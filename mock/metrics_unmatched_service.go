// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/metrics_unmatched_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-server/app/repository"
	reflect "reflect"
)

// MockMetricsUnmatchedService is a mock of MetricsUnmatchedService interface
type MockMetricsUnmatchedService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsUnmatchedServiceMockRecorder
}

// MockMetricsUnmatchedServiceMockRecorder is the mock recorder for MockMetricsUnmatchedService
type MockMetricsUnmatchedServiceMockRecorder struct {
	mock *MockMetricsUnmatchedService
}

// NewMockMetricsUnmatchedService creates a new mock instance
func NewMockMetricsUnmatchedService(ctrl *gomock.Controller) *MockMetricsUnmatchedService {
	mock := &MockMetricsUnmatchedService{ctrl: ctrl}
	mock.recorder = &MockMetricsUnmatchedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsUnmatchedService) EXPECT() *MockMetricsUnmatchedServiceMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockMetricsUnmatchedService) Find(arg0 context.Context, arg1 int64) (*repository.MetricsUnmatched, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*repository.MetricsUnmatched)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockMetricsUnmatchedServiceMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMetricsUnmatchedService)(nil).Find), arg0, arg1)
}

// List mocks base method
func (m *MockMetricsUnmatchedService) List(arg0 context.Context) ([]*repository.MetricsUnmatched, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*repository.MetricsUnmatched)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMetricsUnmatchedServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricsUnmatchedService)(nil).List), arg0)
}

// Insert mocks base method
func (m *MockMetricsUnmatchedService) Insert(arg0 context.Context, arg1 repository.MetricsUnmatched) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockMetricsUnmatchedServiceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMetricsUnmatchedService)(nil).Insert), arg0, arg1)
}

// Delete mocks base method
func (m *MockMetricsUnmatchedService) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMetricsUnmatchedServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMetricsUnmatchedService)(nil).Delete), arg0, arg1)
}

// Update mocks base method
func (m *MockMetricsUnmatchedService) Update(arg0 context.Context, arg1 repository.MetricsUnmatched) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockMetricsUnmatchedServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricsUnmatchedService)(nil).Update), arg0, arg1)
}

// Record mocks base method
func (m *MockMetricsUnmatchedService) Record(ctx context.Context, requestPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, requestPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record
func (mr *MockMetricsUnmatchedServiceMockRecorder) Record(ctx, requestPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockMetricsUnmatchedService)(nil).Record), ctx, requestPath)
}
