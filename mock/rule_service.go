// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/rule_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-server/app/repository"
	reflect "reflect"
)

// MockRuleService is a mock of RuleService interface
type MockRuleService struct {
	ctrl     *gomock.Controller
	recorder *MockRuleServiceMockRecorder
}

// MockRuleServiceMockRecorder is the mock recorder for MockRuleService
type MockRuleServiceMockRecorder struct {
	mock *MockRuleService
}

// NewMockRuleService creates a new mock instance
func NewMockRuleService(ctrl *gomock.Controller) *MockRuleService {
	mock := &MockRuleService{ctrl: ctrl}
	mock.recorder = &MockRuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleService) EXPECT() *MockRuleServiceMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockRuleService) Find(ctx context.Context, id int64) (*repository.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*repository.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRuleServiceMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRuleService)(nil).Find), ctx, id)
}

// List mocks base method
func (m *MockRuleService) List(ctx context.Context) ([]*repository.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*repository.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockRuleServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRuleService)(nil).List), ctx)
}

// Insert mocks base method
func (m *MockRuleService) Insert(ctx context.Context, rule repository.Rule) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, rule)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockRuleServiceMockRecorder) Insert(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRuleService)(nil).Insert), ctx, rule)
}

// Delete mocks base method
func (m *MockRuleService) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRuleServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRuleService)(nil).Delete), ctx, id)
}

// Update mocks base method
func (m *MockRuleService) Update(ctx context.Context, rule repository.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRuleServiceMockRecorder) Update(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRuleService)(nil).Update), ctx, rule)
}

// InsertToDBAndStore mocks base method
func (m *MockRuleService) InsertToDBAndStore(ctx context.Context, rule repository.Rule) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToDBAndStore", ctx, rule)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertToDBAndStore indicates an expected call of InsertToDBAndStore
func (mr *MockRuleServiceMockRecorder) InsertToDBAndStore(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToDBAndStore", reflect.TypeOf((*MockRuleService)(nil).InsertToDBAndStore), ctx, rule)
}
