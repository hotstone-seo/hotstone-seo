// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/urlstore_sync_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-server/app/repository"
	reflect "reflect"
)

// MockURLStoreSyncRepo is a mock of URLStoreSyncRepo interface
type MockURLStoreSyncRepo struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoreSyncRepoMockRecorder
}

// MockURLStoreSyncRepoMockRecorder is the mock recorder for MockURLStoreSyncRepo
type MockURLStoreSyncRepoMockRecorder struct {
	mock *MockURLStoreSyncRepo
}

// NewMockURLStoreSyncRepo creates a new mock instance
func NewMockURLStoreSyncRepo(ctrl *gomock.Controller) *MockURLStoreSyncRepo {
	mock := &MockURLStoreSyncRepo{ctrl: ctrl}
	mock.recorder = &MockURLStoreSyncRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLStoreSyncRepo) EXPECT() *MockURLStoreSyncRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockURLStoreSyncRepo) Find(ctx context.Context, tx *sql.Tx, id int64) (*repository.URLStoreSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, tx, id)
	ret0, _ := ret[0].(*repository.URLStoreSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockURLStoreSyncRepoMockRecorder) Find(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockURLStoreSyncRepo)(nil).Find), ctx, tx, id)
}

// List mocks base method
func (m *MockURLStoreSyncRepo) List(ctx context.Context, tx *sql.Tx) ([]*repository.URLStoreSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, tx)
	ret0, _ := ret[0].([]*repository.URLStoreSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockURLStoreSyncRepoMockRecorder) List(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockURLStoreSyncRepo)(nil).List), ctx, tx)
}

// Insert mocks base method
func (m *MockURLStoreSyncRepo) Insert(ctx context.Context, tx *sql.Tx, URLStoreSync repository.URLStoreSync) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tx, URLStoreSync)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockURLStoreSyncRepoMockRecorder) Insert(ctx, tx, URLStoreSync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockURLStoreSyncRepo)(nil).Insert), ctx, tx, URLStoreSync)
}

// GetLatestVersion mocks base method
func (m *MockURLStoreSyncRepo) GetLatestVersion(ctx context.Context, tx *sql.Tx) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersion", ctx, tx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVersion indicates an expected call of GetLatestVersion
func (mr *MockURLStoreSyncRepoMockRecorder) GetLatestVersion(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersion", reflect.TypeOf((*MockURLStoreSyncRepo)(nil).GetLatestVersion), ctx, tx)
}

// GetListDiff mocks base method
func (m *MockURLStoreSyncRepo) GetListDiff(ctx context.Context, tx *sql.Tx, offsetVersion int64) ([]*repository.URLStoreSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDiff", ctx, tx, offsetVersion)
	ret0, _ := ret[0].([]*repository.URLStoreSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDiff indicates an expected call of GetListDiff
func (mr *MockURLStoreSyncRepoMockRecorder) GetListDiff(ctx, tx, offsetVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDiff", reflect.TypeOf((*MockURLStoreSyncRepo)(nil).GetListDiff), ctx, tx, offsetVersion)
}

// DB mocks base method
func (m *MockURLStoreSyncRepo) DB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockURLStoreSyncRepoMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockURLStoreSyncRepo)(nil).DB))
}
