// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/urlstore_sync_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-server/app/repository"
	reflect "reflect"
)

// MockURLStoreSyncService is a mock of URLStoreSyncService interface
type MockURLStoreSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoreSyncServiceMockRecorder
}

// MockURLStoreSyncServiceMockRecorder is the mock recorder for MockURLStoreSyncService
type MockURLStoreSyncServiceMockRecorder struct {
	mock *MockURLStoreSyncService
}

// NewMockURLStoreSyncService creates a new mock instance
func NewMockURLStoreSyncService(ctrl *gomock.Controller) *MockURLStoreSyncService {
	mock := &MockURLStoreSyncService{ctrl: ctrl}
	mock.recorder = &MockURLStoreSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLStoreSyncService) EXPECT() *MockURLStoreSyncServiceMockRecorder {
	return m.recorder
}

// FindOne mocks base method
func (m *MockURLStoreSyncService) FindOne(ctx context.Context, id int64) (*repository.URLStoreSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*repository.URLStoreSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockURLStoreSyncServiceMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockURLStoreSyncService)(nil).FindOne), ctx, id)
}

// Find mocks base method
func (m *MockURLStoreSyncService) Find(ctx context.Context) ([]*repository.URLStoreSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]*repository.URLStoreSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockURLStoreSyncServiceMockRecorder) Find(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockURLStoreSyncService)(nil).Find), ctx)
}

// Insert mocks base method
func (m *MockURLStoreSyncService) Insert(ctx context.Context, URLStoreSync repository.URLStoreSync) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, URLStoreSync)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockURLStoreSyncServiceMockRecorder) Insert(ctx, URLStoreSync interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockURLStoreSyncService)(nil).Insert), ctx, URLStoreSync)
}

// GetLatestVersion mocks base method
func (m *MockURLStoreSyncService) GetLatestVersion(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersion", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestVersion indicates an expected call of GetLatestVersion
func (mr *MockURLStoreSyncServiceMockRecorder) GetLatestVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersion", reflect.TypeOf((*MockURLStoreSyncService)(nil).GetLatestVersion), ctx)
}

// GetListDiff mocks base method
func (m *MockURLStoreSyncService) GetListDiff(ctx context.Context, offsetVersion int64) ([]*repository.URLStoreSync, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDiff", ctx, offsetVersion)
	ret0, _ := ret[0].([]*repository.URLStoreSync)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDiff indicates an expected call of GetListDiff
func (mr *MockURLStoreSyncServiceMockRecorder) GetListDiff(ctx, offsetVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDiff", reflect.TypeOf((*MockURLStoreSyncService)(nil).GetListDiff), ctx, offsetVersion)
}
