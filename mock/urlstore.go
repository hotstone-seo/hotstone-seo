// Code generated by MockGen. DO NOT EDIT.
// Source: app/urlstore/urlstore.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	urlstore "github.com/hotstone-seo/hotstone-server/app/urlstore"
	reflect "reflect"
)

// MockURLStore is a mock of URLStore interface
type MockURLStore struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoreMockRecorder
}

// MockURLStoreMockRecorder is the mock recorder for MockURLStore
type MockURLStoreMockRecorder struct {
	mock *MockURLStore
}

// NewMockURLStore creates a new mock instance
func NewMockURLStore(ctrl *gomock.Controller) *MockURLStore {
	mock := &MockURLStore{ctrl: ctrl}
	mock.recorder = &MockURLStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLStore) EXPECT() *MockURLStoreMockRecorder {
	return m.recorder
}

// GetURL mocks base method
func (m *MockURLStore) GetURL(path string) (int, urlstore.VarMap) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", path)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(urlstore.VarMap)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL
func (mr *MockURLStoreMockRecorder) GetURL(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockURLStore)(nil).GetURL), path)
}

// AddURL mocks base method
func (m *MockURLStore) AddURL(id int, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddURL", id, key)
}

// AddURL indicates an expected call of AddURL
func (mr *MockURLStoreMockRecorder) AddURL(id, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURL", reflect.TypeOf((*MockURLStore)(nil).AddURL), id, key)
}

// UpdateURL mocks base method
func (m *MockURLStore) UpdateURL(id int, key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateURL", id, key)
}

// UpdateURL indicates an expected call of UpdateURL
func (mr *MockURLStoreMockRecorder) UpdateURL(id, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateURL", reflect.TypeOf((*MockURLStore)(nil).UpdateURL), id, key)
}

// DeleteURL mocks base method
func (m *MockURLStore) DeleteURL(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL
func (mr *MockURLStoreMockRecorder) DeleteURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockURLStore)(nil).DeleteURL), id)
}

// Count mocks base method
func (m *MockURLStore) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockURLStoreMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockURLStore)(nil).Count))
}
