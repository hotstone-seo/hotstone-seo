// Code generated by MockGen. DO NOT EDIT.
// Source: app/repository/metrics_rule_matching.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/app/repository"
	reflect "reflect"
)

// MockMetricsRuleMatchingRepo is a mock of MetricsRuleMatchingRepo interface
type MockMetricsRuleMatchingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRuleMatchingRepoMockRecorder
}

// MockMetricsRuleMatchingRepoMockRecorder is the mock recorder for MockMetricsRuleMatchingRepo
type MockMetricsRuleMatchingRepoMockRecorder struct {
	mock *MockMetricsRuleMatchingRepo
}

// NewMockMetricsRuleMatchingRepo creates a new mock instance
func NewMockMetricsRuleMatchingRepo(ctrl *gomock.Controller) *MockMetricsRuleMatchingRepo {
	mock := &MockMetricsRuleMatchingRepo{ctrl: ctrl}
	mock.recorder = &MockMetricsRuleMatchingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsRuleMatchingRepo) EXPECT() *MockMetricsRuleMatchingRepoMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockMetricsRuleMatchingRepo) Insert(arg0 context.Context, arg1 repository.MetricsRuleMatching) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockMetricsRuleMatchingRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).Insert), arg0, arg1)
}

// ListMismatchedCount mocks base method
func (m *MockMetricsRuleMatchingRepo) ListMismatchedCount(ctx context.Context) ([]*repository.MetricsMismatchedCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMismatchedCount", ctx)
	ret0, _ := ret[0].([]*repository.MetricsMismatchedCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMismatchedCount indicates an expected call of ListMismatchedCount
func (mr *MockMetricsRuleMatchingRepoMockRecorder) ListMismatchedCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMismatchedCount", reflect.TypeOf((*MockMetricsRuleMatchingRepo)(nil).ListMismatchedCount), ctx)
}
