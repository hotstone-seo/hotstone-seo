// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/metrics_rule_matching_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-seo/app/repository"
	reflect "reflect"
)

// MockMetricsRuleMatchingService is a mock of MetricsRuleMatchingService interface
type MockMetricsRuleMatchingService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRuleMatchingServiceMockRecorder
}

// MockMetricsRuleMatchingServiceMockRecorder is the mock recorder for MockMetricsRuleMatchingService
type MockMetricsRuleMatchingServiceMockRecorder struct {
	mock *MockMetricsRuleMatchingService
}

// NewMockMetricsRuleMatchingService creates a new mock instance
func NewMockMetricsRuleMatchingService(ctrl *gomock.Controller) *MockMetricsRuleMatchingService {
	mock := &MockMetricsRuleMatchingService{ctrl: ctrl}
	mock.recorder = &MockMetricsRuleMatchingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsRuleMatchingService) EXPECT() *MockMetricsRuleMatchingServiceMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockMetricsRuleMatchingService) Insert(arg0 context.Context, arg1 repository.MetricsRuleMatching) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockMetricsRuleMatchingServiceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMetricsRuleMatchingService)(nil).Insert), arg0, arg1)
}

// ListMismatchedCount mocks base method
func (m *MockMetricsRuleMatchingService) ListMismatchedCount(ctx context.Context) ([]*repository.MetricsMismatchedCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMismatchedCount", ctx)
	ret0, _ := ret[0].([]*repository.MetricsMismatchedCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMismatchedCount indicates an expected call of ListMismatchedCount
func (mr *MockMetricsRuleMatchingServiceMockRecorder) ListMismatchedCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMismatchedCount", reflect.TypeOf((*MockMetricsRuleMatchingService)(nil).ListMismatchedCount), ctx)
}

// SetMatched mocks base method
func (m_2 *MockMetricsRuleMatchingService) SetMatched(m *repository.MetricsRuleMatching) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "SetMatched", m)
}

// SetMatched indicates an expected call of SetMatched
func (mr *MockMetricsRuleMatchingServiceMockRecorder) SetMatched(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMatched", reflect.TypeOf((*MockMetricsRuleMatchingService)(nil).SetMatched), m)
}

// SetMismatched mocks base method
func (m_2 *MockMetricsRuleMatchingService) SetMismatched(m *repository.MetricsRuleMatching, mismatchedURL string) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "SetMismatched", m, mismatchedURL)
}

// SetMismatched indicates an expected call of SetMismatched
func (mr *MockMetricsRuleMatchingServiceMockRecorder) SetMismatched(m, mismatchedURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMismatched", reflect.TypeOf((*MockMetricsRuleMatchingService)(nil).SetMismatched), m, mismatchedURL)
}
