// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/store.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockURLStore is a mock of URLStore interface
type MockURLStore struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoreMockRecorder
}

// MockURLStoreMockRecorder is the mock recorder for MockURLStore
type MockURLStoreMockRecorder struct {
	mock *MockURLStore
}

// NewMockURLStore creates a new mock instance
func NewMockURLStore(ctrl *gomock.Controller) *MockURLStore {
	mock := &MockURLStore{ctrl: ctrl}
	mock.recorder = &MockURLStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLStore) EXPECT() *MockURLStoreMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockURLStore) Add(id int, key string, data interface{}) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", id, key, data)
	ret0, _ := ret[0].(int)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockURLStoreMockRecorder) Add(id, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockURLStore)(nil).Add), id, key, data)
}

// Get mocks base method
func (m *MockURLStore) Get(path string, pvalues []string) (interface{}, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path, pvalues)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockURLStoreMockRecorder) Get(path, pvalues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLStore)(nil).Get), path, pvalues)
}

// Delete mocks base method
func (m *MockURLStore) Delete(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockURLStoreMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLStore)(nil).Delete), id)
}

// String mocks base method
func (m *MockURLStore) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockURLStoreMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockURLStore)(nil).String))
}

// Count mocks base method
func (m *MockURLStore) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockURLStoreMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockURLStore)(nil).Count))
}
