// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/provider_service.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/hotstone-seo/hotstone-server/app/repository"
	service "github.com/hotstone-seo/hotstone-server/app/service"
	reflect "reflect"
)

// MockProviderService is a mock of ProviderService interface
type MockProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockProviderServiceMockRecorder
}

// MockProviderServiceMockRecorder is the mock recorder for MockProviderService
type MockProviderServiceMockRecorder struct {
	mock *MockProviderService
}

// NewMockProviderService creates a new mock instance
func NewMockProviderService(ctrl *gomock.Controller) *MockProviderService {
	mock := &MockProviderService{ctrl: ctrl}
	mock.recorder = &MockProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderService) EXPECT() *MockProviderServiceMockRecorder {
	return m.recorder
}

// MatchRule mocks base method
func (m *MockProviderService) MatchRule(arg0 service.Matcher, arg1 service.MatchRuleRequest) (*service.MatchRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRule", arg0, arg1)
	ret0, _ := ret[0].(*service.MatchRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRule indicates an expected call of MatchRule
func (mr *MockProviderServiceMockRecorder) MatchRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRule", reflect.TypeOf((*MockProviderService)(nil).MatchRule), arg0, arg1)
}

// RetrieveData mocks base method
func (m *MockProviderService) RetrieveData(arg0 service.RetrieveDataRequest) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveData", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveData indicates an expected call of RetrieveData
func (mr *MockProviderServiceMockRecorder) RetrieveData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveData", reflect.TypeOf((*MockProviderService)(nil).RetrieveData), arg0)
}

// Tags mocks base method
func (m *MockProviderService) Tags(ruleID string, data interface{}) ([]*repository.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags", ruleID, data)
	ret0, _ := ret[0].([]*repository.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags
func (mr *MockProviderServiceMockRecorder) Tags(ruleID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockProviderService)(nil).Tags), ruleID, data)
}

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Match mocks base method
func (m *MockMatcher) Match(url string) (int, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", url)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]string)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockMatcherMockRecorder) Match(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockMatcher)(nil).Match), url)
}
